#!/usr/bin/python
#

# TODO
# read in profiles and add them to NetworkManager
# create GNOME panel applet to show mesh status
# any use for the env vars sent with 'up'?

import ConfigParser
import datetime
import os
import sys
import NetworkManager
import socket
import subprocess
import uuid
import commotionc


class ConnectionFileManager():
    '''
    manage the generation of NetworkManager system-connections/ files based on
    the Commotion profiles
    '''

    def __init__(self, commotion=None):
        if commotion:
            self.commotion = commotion
        else:
            self.commotion = commotionc.CommotionCore('nm-dispatcher-olsrd')

    def _log(self, msg):
        self.commotion.log(msg) 

    def _ip_string2int(self, s):
        "Convert dotted IPv4 address to integer."
        # first validate the IP
        try:
            socket.inet_aton(s)
        except socket.error:
            self._log('"' + s + '" is not a valid IP address!')
            return
        return reduce(lambda a,b: a<<8 | b, map(int, s.split(".")))

    def _get_net_size(self, netmask):
        # after bin(), remove the 0b prefix, strip the 0s and count the 1s
        binary_str = bin(self._ip_string2int(netmask))[2:]
        return str(len(binary_str.rstrip('0')))

    def writeConnections(self, profiles):
        '''write out the Commotion profiles as NetworkManager system-connections/'''

        self._log('\n----------------------------------------')
        self._log('Writing connections:')
        for ssid,profile in profiles.items():
            fn = os.path.join('/etc/NetworkManager/system-connections', ssid)
            myuuid = uuid.uuid4()
            if os.path.exists(fn):
                mtime = os.path.getmtime(fn)
                if not profile['mtime'] > mtime:
                    # only update if the profile is newer than the connection
                    self._log('Existing connection "' + fn + '" is newer than profile "'
                              + profile['filename'] + '"')
                    continue
                self._log('Overwriting existing file: ' + fn)
                c = ConfigParser.ConfigParser()
                with open(fn) as f:
                    c.readfp(f)
                myuuid = c.get('connection', 'uuid')
                self._log('Reusing UUID "' + myuuid + '" from "' + fn + '"')
            f = open(fn, 'wb')
            config = ConfigParser.RawConfigParser()
            config.add_section('connection')
            config.set('connection', 'id', ssid)
            config.set('connection', 'uuid', myuuid)
            config.set('connection', 'type', '802-11-wireless')
            config.add_section('802-11-wireless')
            config.set('802-11-wireless', 'ssid', ssid)
            config.set('802-11-wireless', 'mode', 'adhoc')
            config.set('802-11-wireless', 'band', 'bg')
            config.set('802-11-wireless', 'channel', profile['channel'])
            config.set('802-11-wireless', 'bssid', profile['bssid'])
            if 'psk' in profile:
                config.set('802-11-wireless', 'security', '802-11-wireless-security')
                config.add_section('802-11-wireless-security')
                config.set('802-11-wireless-security','key-mgmt', 'wpa-psk')
                config.set('802-11-wireless-security','proto', 'rsn')
                config.set('802-11-wireless-security','pairwise', 'ccmp')
                config.set('802-11-wireless-security','group', 'ccmp')
                config.set('802-11-wireless-security','auth-alg', 'open')
                config.set('802-11-wireless-security','psk', profile['psk'])
            config.add_section('ipv6')
            config.set('ipv6', 'method', 'auto')
            config.add_section('ipv4')
            config.set('ipv4', 'method', 'manual')
            config.set('ipv4', 'dns', profile['dns'])
            ip = profile['ip']
            net = self._get_net_size(profile['netmask'])
            config.set('ipv4', 'addresses1', ip + ';' + net + ';0.0.0.0')
            config.write(open(fn, 'w'))
            subprocess.call(['chmod', '600', fn])


class MeshConnection():

    def __init__(self, interface, status):
        self.commotion = commotionc.CommotionCore('nm-dispatcher-olsrd')
        self.log('launching with "' + interface + '" and "' + status + '"')

        self.interface = interface
        self.olsrdconf = '/etc/olsrd/olsrd.conf'

        self.profiles = self.commotion.readProfiles()
        cfm = ConnectionFileManager(self.commotion)
        cfm.writeConnections(self.profiles)

        self.log('Checking if "' + interface + '" is actually connected to a mesh')
        meshconnection = self.getMeshConnection(interface)
        if meshconnection:
		if status == 'up':
			##Run checks and fallbacks: driver, wpa_supplicant version/IBSS-RSN
			#subprocess.call(['wpa_cli', 'ap_scan', '2']) #Disables roaming across different BSSIDs, in case network-manager doesn't take care of this automatically
			self.commotion.startOlsrd(interface, meshconnection['profile']['conf'])
		if status == 'down':
		    self.commotion.stopOlsrd() 
		    subprocess.call(['rfkill', 'block', 'wifi'])
		    subprocess.call(['rfkill', 'unblock', 'wifi'])


    def log(self, msg):
        self.commotion.log(msg)


    def readConnections(self):
        '''
        Get all pre-configured wifi connections from NetworkManager and return dict'''
        connections = dict()
        for c in NetworkManager.Settings.ListConnections():
            settings = c.GetSettings()
            if settings['connection']['type'] == '802-11-wireless':
                k = settings['connection']['id']
                self.log('found Connection "' + k + '"')
                connections[k] = settings
        return connections


    def matchProfile(self, ssid):
        ret = False
        for k,v in self.profiles.items():
            if k == ssid and v['ssid'] == ssid:
                self.log('SSID "' + ssid + '" matches, we have a mesh profile!')
                return v


    def getMeshConnection(self, interface):
        '''
        match the active adhoc connection with the mesh profiles, and if there
        is a match, return the connection dict
        '''
        c = self.getAdhocConnection(interface)
        if c:
            ssid = c['wireless']['ssid']
            self.log('checking if SSID "' + ssid + '" matches one of our profiles')
            profile = self.matchProfile(ssid)
            if profile:
                c['profile'] = profile
                return c


    def getAdhocConnection(self, interface):
        '''
        return data about the active adhoc connection for a given interface
        '''
        connection = None

        # first find the active connection that we are interested in
        foundit = False
        for ac in NetworkManager.NetworkManager.ActiveConnections:
            for d in ac.Devices:
                wireless = None
                ap = None
                if d.Managed and d.Interface == interface \
                        and d.DeviceType == NetworkManager.NM_DEVICE_TYPE_WIFI:
                    wireless = d.SpecificDevice()
                    if wireless.Mode == NetworkManager.NM_802_11_MODE_ADHOC:
                        ap = wireless.ActiveAccessPoint
                        foundit = True
                        break
            if foundit:
                break
            ac = None
        if ac == None:
            return None

        # then find the settings for that active connection
        settings = ac.Connection.GetSettings()
        if settings and ap \
                and settings['connection']['type'] == '802-11-wireless' \
                and ap.Ssid == settings['802-11-wireless']['ssid']:
            w = dict()
            w['mac-address'] = wireless.HwAddress
            w['bitrate'] = wireless.Bitrate
            w['ssid'] = ap.Ssid
            w['bssid'] = ap.HwAddress
            w['channel'] = (ap.Frequency - 2407) / 5
            w['maxbitrate'] = ap.MaxBitrate
            w['strength'] = ap.Strength
            self.log('Found mesh adhoc connection: ' + w['ssid'] + '/'
                     + w['bssid'] + '/' + str(w['channel']))
            connection = settings
            connection['wireless'] = w

        return connection


interface = sys.argv[1]
status = sys.argv[2]
m = MeshConnection(interface, status)
